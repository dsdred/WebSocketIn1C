Процедура ПередПодключением(Клиент) Экспорт 
	Параметры = ПараметрыКлиента(Клиент); 
	ЗаписатьВЛог("ПередПодключением",Клиент.Ключ,Параметры);	
КонецПроцедуры

Процедура ПриОткрытииСоединения(Соединение) Экспорт
	Параметры = ПараметрыСоединения(Соединение);
	ЗаписатьВЛог("ПриОткрытииСоединения",Соединение.Ключ,Параметры);
КонецПроцедуры

Процедура ПриПолученииСообщения(Соединение, Сообщение) Экспорт 
	Параметры = ПараметрыСоединения(Соединение); 
	Параметры.Вставить("Сообщение",Сообщение);
	ЗаписатьВЛог("ПриПолученииСообщения",Соединение.Ключ,Параметры);
КонецПроцедуры

Процедура ПриОшибке(Соединение, КодОшибки, Описание) Экспорт  
	Параметры = ПараметрыСоединения(Соединение); 
	Параметры.Вставить("Код",КодОшибки);
	Параметры.Вставить("Описание",Описание);
	ЗаписатьВЛог("ПриОшибке",Соединение.Ключ,Параметры);
КонецПроцедуры    

Процедура ПриЗакрытииСоединения(Соединение, КодЗакрытия) Экспорт 	
	Параметры = ПараметрыСоединения(Соединение); 
	Параметры.Вставить("Код",КодЗакрытия);
	ЗаписатьВЛог("ПриЗакрытииСоединения",Соединение.Ключ,Параметры);
КонецПроцедуры



Процедура ОбработчикОткрытия(Соединение) Экспорт 
	Параметры = ПараметрыСоединения(Соединение);
	ЗаписатьВЛог("ОбработчикОткрытия",Соединение.Ключ,Параметры);	
КонецПроцедуры   

Процедура ОбработчикПолученияСообщения(Соединение, Сообщение) Экспорт
	Параметры = ПараметрыСоединения(Соединение); 
	Параметры.Вставить("Сообщение",Сообщение);
	ЗаписатьВЛог("ОбработчикПолученияСообщения",Соединение.Ключ,Параметры);
КонецПроцедуры    

Процедура ОбработчикОшибки(Соединение, КодОшибки, Описание) Экспорт  
	Параметры = ПараметрыСоединения(Соединение); 
	Параметры.Вставить("Код",КодОшибки);
	Параметры.Вставить("Описание",Описание);
	ЗаписатьВЛог("ОбработчикОшибки",Соединение.Ключ,Параметры);
КонецПроцедуры 

Процедура ОбработчикЗакрытия(Соединение, КодЗакрытия) Экспорт  
	Параметры = ПараметрыСоединения(Соединение); 
	Параметры.Вставить("Код",КодЗакрытия);
	ЗаписатьВЛог("ОбработчикЗакрытия",Соединение.Ключ,Параметры);	
КонецПроцедуры 



#Область СборПараметров

Функция ПараметрыКлиента(Клиент)
	
	СтруктураКлиент = Новый Структура;
	СтруктураКлиент.Вставить("URLСервера", Клиент.URLСервера);
	СтруктураКлиент.Вставить("ИмяПользователяИнформационнойБазы", Клиент.ИмяПользователяИнформационнойБазы);
	СтруктураКлиент.Вставить("Заголовки", Клиент.ПараметрыСоединения.Заголовки);
	СтруктураКлиент.Вставить("МетаданныеИмя", Клиент.Метаданные.Имя);
	//СтруктураКлиент.Вставить("МетаданныеЗаголовки", Клиент.Метаданные.Заголовки);
	СтруктураКлиент.Вставить("МетаданныеURLСервера", Клиент.Метаданные.URLСервера);
	КлиентJSON = ЗаписатьДанныеВJSON(,СтруктураКлиент).Результат;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Клиент",КлиентJSON);
	
	Возврат Параметры;
КонецФункции

Функция ПараметрыСоединения(Соединение)
	
	СтруктураСоединение = Новый Структура;
	СтруктураСоединение.Вставить("URLСервера", Соединение.URLСервера);
	СтруктураСоединение.Вставить("ИмяПользователяИнформационнойБазы", Соединение.ИмяПользователяИнформационнойБазы);  
	СтруктураСоединение.Вставить("Модуль", Соединение.Обработчики.Модуль); 
	СтруктураСоединение.Вставить("ОбработчикЗакрытияСоединения", Соединение.Обработчики.ОбработчикЗакрытияСоединения); 
	СтруктураСоединение.Вставить("ОбработчикОткрытияСоединения", Соединение.Обработчики.ОбработчикОткрытияСоединения); 
	СтруктураСоединение.Вставить("ОбработчикОшибки", Соединение.Обработчики.ОбработчикОшибки); 
	СтруктураСоединение.Вставить("ОбработчикПолученияСообщения", Соединение.Обработчики.ОбработчикПолученияСообщения); 
	СтруктураСоединение.Вставить("Заголовки", Соединение.Параметры.Заголовки);

	СоединениеJSON = ЗаписатьДанныеВJSON(,СтруктураСоединение).Результат;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Соединение",СоединениеJSON);
	Возврат Параметры;
КонецФункции

#КонецОбласти
	

Процедура ЗаписатьВЛог(Обработчик,Ключ,Параметры=Неопределено)
	Дата = ТекущаяДатаСеанса();
	Если Не ЗначениеЗаполнено(Параметры) Тогда 
		Параметры = Новый Структура;
	КонецЕсли;	
	
	
	БылаОшибка = Ложь;
	Попытка	
		               
		НаборЗаписей = РегистрыСведений.СобытияВебСокеты.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.Дата.Установить(Дата);
		НаборЗаписей.Отбор.Обработчик.Установить(Обработчик);
		НаборЗаписей.Отбор.Ключ.Установить(Ключ);
		НаборЗаписей.Прочитать();	

		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();
			
			НоваяЗаписьРегистра.Дата 		= Дата;
			НоваяЗаписьРегистра.Обработчик 	= Обработчик;
			НоваяЗаписьРегистра.Ключ 		= Ключ;	
		Иначе
			НоваяЗаписьРегистра = НаборЗаписей[0];
		КонецЕсли;
				
       	Для Каждого текПараметр Из Параметры Цикл 
				
			НоваяЗаписьРегистра[текПараметр.Ключ] = текПараметр.Значение;	
			
		КонецЦикла;
		
		
		НаборЗаписей.Записать(); 
					
	Исключение	
		
		БылаОшибка = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
	КонецПопытки;

	Если БылаОшибка Тогда 
		ЗаписьЖурналаРегистрации("Ошибка",УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецЕсли;	
	
КонецПроцедуры


#Область СериализацияДесериализацияДанных 

// Возвращает чаще всего используемые ПараметрыЗаписиJSON (JSONWriterSettings)
// 
// Возвращаемое значение:
//  Результат - Структура - Стандартное заполнение
//
Функция СтандартныеПараметрыJSON() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПереносСтрок",					ПереносСтрокJSON.Авто);
	Результат.Вставить("СимволОтступа",					" ");
	Результат.Вставить("ИспользоватьДвойныеКавычки",	Истина);
	Результат.Вставить("ЭкранированиеСимволов",			ЭкранированиеСимволовJSON.Нет);
	Результат.Вставить("ЭкранироватьАмперсанд",			Ложь);
	Результат.Вставить("ЭкранироватьОдинарныеКавычки",	Ложь);
	Результат.Вставить("ЭкранироватьРазделителиСтрок",	Ложь);
	Результат.Вставить("ЭкранироватьУгловыеСкобки",		Ложь);
	Результат.Вставить("ЭкранироватьСлеш",				Ложь);	
	
	Возврат Результат;		
	
КонецФункции

// Преобразует данные в формат JSON
//
// Параметры:
//  ВходящиеПараметры	 - Структура - Параметры формирование JSON
//  ВходныеДанные		 - ЛюбоеЗначение - Данные которые нужно перевести в JSON
// 
// Возвращаемое значение:
//  Результат - Структура
//  	Отработал - Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//  	Результат - Строка - JSON
//
Функция ЗаписатьДанныеВJSON(Знач ВходящиеПараметры = Неопределено, Знач ВходныеДанные = "") Экспорт
	
	Результат = Новый Структура("Результат, Отработал, ТекстОшибки", "", Истина, "");
	
	Если ВходящиеПараметры = Неопределено Тогда 
		ВходящиеПараметры = СтандартныеПараметрыJSON(); 	
	КонецЕсли;	
	
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ВходящиеПараметры.ПереносСтрок,
												ВходящиеПараметры.СимволОтступа,
												ВходящиеПараметры.ИспользоватьДвойныеКавычки,
												ВходящиеПараметры.ЭкранированиеСимволов,
												ВходящиеПараметры.ЭкранироватьУгловыеСкобки,
												ВходящиеПараметры.ЭкранироватьРазделителиСтрок,
												ВходящиеПараметры.ЭкранироватьАмперсанд,
												ВходящиеПараметры.ЭкранироватьОдинарныеКавычки,
												ВходящиеПараметры.ЭкранироватьСлеш);
	
	
	Попытка
		ЗаписьJSON						= Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру 	= Истина;
		ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);	
		ЗаписатьJSON(ЗаписьJSON, ВходныеДанные,,"ФункцияПреобразованияЗаписи",ВебСокетыКлиентСервер);
		Результат.Вставить("Результат",	ЗаписьJSON.Закрыть());
	Исключение
		Результат.Отработал 			= Ложь;
		Результат.ТекстОшибки 			= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

Функция ФункцияПреобразованияЗаписи(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
    Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда  
	    МассивЗначений = Значение.ВыгрузитьЗначения();
		Значение = МассивЗначений;
	КонецЕсли;	
КонецФункции

// Десериализует строку JSON в формат данных 1С
//
// Параметры:
//  СтрокаJSON - Строка - JSON
// 
// Возвращаемое значение:
//  Результат - Структура
//  	Отработал - Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//  	Результат - ЛюбоеЗначение - Данные в формате 1С
//
Функция ЧтениеДанныхИзJSON(Знач СтрокаJSON) Экспорт
	
	Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
						
	Попытка
		ЧтениеJSON 				= Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		Результат.Вставить("Результат", ПрочитатьJSON(ЧтениеJSON));
	Исключение
		Результат.Отработал 	= Ложь;
		Результат.ТекстОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Десериализует поток JSON в формат данных 1С
//
// Параметры:
//  ПотокJSON	 - Поток -
// 
// Возвращаемое значение:
//  Результат - Структура
// 		Отработал - Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//  	Результат - ЛюбоеЗначение - Данные в формате 1С
//
Функция ЧтениеПотокаИзJSON(Знач ПотокJSON) Экспорт
	
	Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
					
	Попытка
		ЧтениеJSON 				= Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(ПотокJSON);
		Результат.Вставить("Результат", ПрочитатьJSON(ЧтениеJSON));
	Исключение
		Результат.Отработал 	= Ложь;
		Результат.ТекстОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


